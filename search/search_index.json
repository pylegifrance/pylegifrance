{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation PyLegifrance","text":"<p>PyLegifrance simplifie l'acc\u00e8s aux donn\u00e9es juridiques fran\u00e7aises via l'API Legifrance.</p>"},{"location":"#sections","title":"Sections","text":"<p>Cette documentation suit le framework Di\u00e1taxis, qui organise la documentation technique en quatre quadrants distincts :</p> <ul> <li>Tutoriels - Apprentissage guid\u00e9 pour les d\u00e9butants</li> <li>Guides pratiques - Instructions pratiques pour r\u00e9soudre des probl\u00e8mes sp\u00e9cifiques</li> <li>R\u00e9f\u00e9rence API - Information technique d\u00e9taill\u00e9e</li> <li>Explications - Clarification des concepts et contexte</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>  uv add pylegifrance\n</code></pre>"},{"location":"#prerequis","title":"Pr\u00e9requis","text":"<p>Cr\u00e9ez un compte sur le portail PISTE : https://piste.gouv.fr</p> <p>Voir le guide officiel pour plus de d\u00e9tails.</p>"},{"location":"#liens","title":"Liens","text":"<ul> <li>GitHub</li> <li>Issues</li> </ul>"},{"location":"tasks/","title":"PyLegifrance Improvement Tasks","text":"<p>This document contains a comprehensive list of actionable tasks for improving the PyLegifrance codebase. Each task is marked with a checkbox for progress tracking.</p>"},{"location":"tasks/#architecture-and-design","title":"Architecture and Design","text":"<ul> <li>[ ] Implement a proper layered architecture with clear separation of concerns:</li> <li>[ ] Separate data models from API models</li> <li>[ ] Create dedicated service layer between API client and business logic</li> <li> <p>[ ] Implement repository pattern for data access</p> </li> <li> <p>[ ] Refactor the pipeline pattern implementation:</p> </li> <li>[ ] Create a more flexible pipeline configuration system</li> <li>[ ] Implement better error propagation through the pipeline</li> <li> <p>[ ] Add pipeline step validation</p> </li> <li> <p>[ ] Improve API client design:</p> </li> <li>[ ] Implement proper API versioning support</li> <li>[ ] Create dedicated client classes for different API sections</li> <li>[ ] Add request/response logging with sensitive data masking</li> </ul>"},{"location":"tasks/#code-quality-and-modern-python-features","title":"Code Quality and Modern Python Features","text":"<ul> <li>[ ] Leverage more Python 3.12+ features:</li> <li>[ ] Use pattern matching for response processing</li> <li>[ ] Implement Self type annotations</li> <li>[ ] Use TypedDict for dictionary return types</li> <li> <p>[ ] Utilize PEP 695 type aliases where appropriate</p> </li> <li> <p>[ ] Improve type annotations:</p> </li> <li>[ ] Add complete type hints to all functions and methods</li> <li>[ ] Use more specific types instead of Dict/List</li> <li>[ ] Add Generic type parameters where appropriate</li> <li> <p>[ ] Add Protocol classes for interface definitions</p> </li> <li> <p>[ ] Enhance code organization:</p> </li> <li>[ ] Standardize module structure across the codebase</li> <li>[ ] Implement consistent naming conventions</li> <li>[ ] Reduce code duplication through better abstraction</li> <li>[ ] Break down large functions into smaller, focused ones</li> </ul>"},{"location":"tasks/#testing","title":"Testing","text":"<ul> <li>[ ] Expand test coverage:</li> <li>[ ] Add unit tests for all public functions and classes</li> <li>[ ] Implement integration tests for API interactions</li> <li>[ ] Add property-based testing for models</li> <li> <p>[ ] Create end-to-end tests for common use cases</p> </li> <li> <p>[ ] Improve test infrastructure:</p> </li> <li>[ ] Implement proper test fixtures and factories</li> <li>[ ] Add test parameterization for edge cases</li> <li>[ ] Create mock responses for all API endpoints</li> <li> <p>[ ] Add test coverage reporting</p> </li> <li> <p>[ ] Implement BDD testing as mentioned in the test README:</p> </li> <li>[ ] Create feature files for key functionality</li> <li>[ ] Implement step definitions</li> <li>[ ] Set up Cucumber integration</li> </ul>"},{"location":"tasks/#documentation","title":"Documentation","text":"<ul> <li>[ ] Enhance code documentation:</li> <li>[ ] Add docstrings to all public classes and methods</li> <li>[ ] Standardize docstring format (Google style)</li> <li>[ ] Include examples in docstrings</li> <li> <p>[ ] Document exceptions and error cases</p> </li> <li> <p>[ ] Improve project documentation:</p> </li> <li>[ ] Create comprehensive API reference</li> <li>[ ] Add architecture documentation</li> <li>[ ] Create tutorials for common use cases</li> <li> <p>[ ] Add contribution guidelines</p> </li> <li> <p>[ ] Add inline comments for complex logic:</p> </li> <li>[ ] Explain business rules and domain-specific logic</li> <li>[ ] Document non-obvious algorithmic choices</li> <li>[ ] Add references to external resources where applicable</li> </ul>"},{"location":"tasks/#error-handling-and-logging","title":"Error Handling and Logging","text":"<ul> <li>[ ] Implement comprehensive error handling:</li> <li>[ ] Create custom exception hierarchy</li> <li>[ ] Add proper exception chaining</li> <li>[ ] Implement graceful degradation for non-critical failures</li> <li> <p>[ ] Add context information to exceptions</p> </li> <li> <p>[ ] Enhance logging:</p> </li> <li>[ ] Implement structured logging</li> <li>[ ] Add request/response logging with PII redaction</li> <li>[ ] Create log correlation across components</li> <li>[ ] Add performance metrics logging</li> </ul>"},{"location":"tasks/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>[ ] Implement caching:</li> <li>[ ] Add response caching for frequently accessed data</li> <li>[ ] Implement token caching with proper expiration</li> <li> <p>[ ] Add model validation caching</p> </li> <li> <p>[ ] Optimize API requests:</p> </li> <li>[ ] Implement request batching where possible</li> <li>[ ] Add parallel processing for independent requests</li> <li> <p>[ ] Optimize payload size</p> </li> <li> <p>[ ] Improve memory usage:</p> </li> <li>[ ] Use generators for large result sets</li> <li>[ ] Implement lazy loading for nested resources</li> <li>[ ] Optimize model serialization/deserialization</li> </ul>"},{"location":"tasks/#dependency-management","title":"Dependency Management","text":"<ul> <li>[ ] Modernize dependency management:</li> <li>[ ] Update to latest versions of all dependencies</li> <li>[ ] Pin dependencies with minimum versions</li> <li>[ ] Add dependency security scanning</li> <li> <p>[ ] Document dependency purposes and alternatives</p> </li> <li> <p>[ ] Improve environment management:</p> </li> <li>[ ] Create development, testing, and production configurations</li> <li>[ ] Implement better environment variable handling</li> <li>[ ] Add configuration validation</li> </ul>"},{"location":"tasks/#api-design-and-features","title":"API Design and Features","text":"<ul> <li>[ ] Complete API implementation:</li> <li>[ ] Implement remaining search functions (JURI, CETAT, etc.)</li> <li>[ ] Add suggest, consult, and list functions</li> <li> <p>[ ] Implement advanced formatting options</p> </li> <li> <p>[ ] Enhance API usability:</p> </li> <li>[ ] Add pagination helpers</li> <li>[ ] Implement result filtering and sorting</li> <li>[ ] Create high-level convenience functions</li> <li> <p>[ ] Add bulk operations support</p> </li> <li> <p>[ ] Improve API robustness:</p> </li> <li>[ ] Implement rate limiting and backoff</li> <li>[ ] Add request validation</li> <li>[ ] Implement timeout handling</li> <li>[ ] Add circuit breaker pattern for API calls</li> </ul>"},{"location":"tasks/#cicd-and-devops","title":"CI/CD and DevOps","text":"<ul> <li>[ ] Enhance CI/CD pipeline:</li> <li>[ ] Add automated testing on multiple Python versions</li> <li>[ ] Implement code quality checks (linting, formatting)</li> <li>[ ] Add security scanning</li> <li> <p>[ ] Automate documentation generation and publishing</p> </li> <li> <p>[ ] Improve release process:</p> </li> <li>[ ] Implement semantic versioning</li> <li>[ ] Add changelog generation</li> <li>[ ] Create release automation</li> <li>[ ] Add deployment verification</li> </ul>"},{"location":"tasks/#security","title":"Security","text":"<ul> <li>[ ] Enhance security:</li> <li>[ ] Implement secure credential handling</li> <li>[ ] Add input validation and sanitization</li> <li>[ ] Implement proper error messages (without leaking sensitive information)</li> <li> <p>[ ] Add security headers to requests</p> </li> <li> <p>[ ] Add security documentation:</p> </li> <li>[ ] Document security best practices</li> <li>[ ] Create security policy</li> <li>[ ] Add vulnerability reporting process</li> </ul>"},{"location":"explanation/","title":"Explications","text":"<p>PyLegifrance est une biblioth\u00e8que Python qui simplifie l'acc\u00e8s aux donn\u00e9es juridiques fran\u00e7aises disponibles via l'API Legifrance.</p>"},{"location":"explanation/#structure","title":"Structure","text":"<ul> <li><code>client.py</code> : Gestion de l'authentification et des appels API</li> <li><code>models</code> : D\u00e9finition des structures de donn\u00e9es avec Pydantic</li> <li><code>pipeline</code> : Traitement des requ\u00eates et r\u00e9ponses</li> </ul>"},{"location":"explanation/#fonctionnalites","title":"Fonctionnalit\u00e9s","text":"<ul> <li><code>recherche_CODE</code> : Recherche dans les codes fran\u00e7ais</li> <li><code>recherche_LODA</code> : Recherche dans les lois, ordonnances, d\u00e9crets et arr\u00eat\u00e9s</li> <li><code>recherche_JURI</code> : Recherche dans la jurisprudence (en d\u00e9veloppement)</li> </ul>"},{"location":"explanation/#roadmap","title":"Roadmap","text":"<ul> <li>[ ] Ajout des fonctions recherche_JURI, rechercher_CETAT, KALI,...</li> <li>[ ] Impl\u00e9mentation des fonctions suggest, consult et list</li> <li>[ ] Ajout de fonctions de formattage avanc\u00e9 en sortie</li> <li>[ ] Ajout des param\u00e8tres de tri des r\u00e9sultats </li> </ul> <p>Pour une liste compl\u00e8te des fonctionnalit\u00e9s propos\u00e9es et des probl\u00e8mes connus, consultez les issues ouvertes.</p>"},{"location":"how-to/","title":"Guides pratiques","text":""},{"location":"how-to/#installation","title":"Installation","text":"<pre><code>  uv add pylegifrance\n</code></pre>"},{"location":"how-to/#obtenir-un-compte-piste","title":"Obtenir un compte PISTE","text":"<ol> <li>Cr\u00e9ez un compte sur https://piste.gouv.fr</li> <li>Souscrivez \u00e0 l'API Legifrance</li> <li>R\u00e9cup\u00e9rez vos identifiants (client_id et client_secret)</li> </ol> <p>Voir le guide officiel pour plus de d\u00e9tails.</p>"},{"location":"how-to/#configuration-des-cles-api","title":"Configuration des cl\u00e9s API","text":"<p>Variables d'environnement ou fichier <code>.env</code> :</p> <pre><code>LEGIFRANCE_CLIENT_ID=votre_client_id\nLEGIFRANCE_CLIENT_SECRET=votre_client_secret\n</code></pre>"},{"location":"how-to/#exemples-dutilisation","title":"Exemples d'utilisation","text":""},{"location":"how-to/#recherche-dans-les-codes","title":"Recherche dans les codes","text":"<p>Pour la liste des codes disponibles : https://www.legifrance.gouv.fr/liste/code?etatTexte=VIGUEUR</p> <pre><code>from pylegifrance import recherche_code\n\n# Obtenir l'article 7 du Code civil\nrecherche_code(code_name=\"Code civil\", search=\"7\")\n\n# Obtenir l'article 7 du Code civil en ne s\u00e9lectionnant que certains champs sp\u00e9cifiques\nrecherche_code(code_name=\"Code civil\", search=\"7\", formatter=True)\n\n# Obtenir l'int\u00e9gralit\u00e9 du Code civil\nrecherche_code(code_name=\"Code civil\")\n\n# Rechercher le mot \"s\u00fbret\u00e9\" dans les articles du Code civil\nrecherche_code(code_name=\"Code civil\", search=\"s\u00fbret\u00e9\", champ=\"ARTICLE\")\n</code></pre> <p>La fonction recherche_code permet la recherche dans le fond CODE (CODE_DATE, CODE_ETAT) d'un article par son num\u00e9ro, d'un terme de recherche ou d'un code dans son int\u00e9gralit\u00e9.</p> <p>Cette fonction ne r\u00e9cup\u00e8re que les codes en vigueur \u00e0 la date actuelle.  Par d\u00e9faut, la facette \"DATE_VERSION\" est d\u00e9finie sur la date du jour, quel que soit le fond cible (CODE_DATE ou CODE_ETAT).</p> <p>! Attention : Il est de la responsabilit\u00e9 exclusive de l'utilisateur de v\u00e9rifier que les informations renvoy\u00e9es par l'API sont pertinentes et \u00e0 jour.</p>"},{"location":"how-to/#recherche-dans-le-fond-loda-loi-ordonnance-decret-arrete","title":"Recherche dans le fond LODA (LOI, ORDONNANCE, DECRET, ARRETE)","text":"<pre><code>from pylegifrance import recherche_LODA\n\n# Obtenir l'article 9 de la loi informatique et libert\u00e9s\nrecherche_LODA(text_id=\"78-17\", search=\"9\")\n\n# Obtenir l'article 2 de l'ordonnance 58-1100 \nrecherche_LODA(text_id='58-1100', search=\"2\", nature=[\"ORDONNANCE\"])\n\n# Obtenir l'int\u00e9gralit\u00e9 de la loi informatique et libert\u00e9s\nrecherche_LODA(text_id=\"78-17\")\n\n# Rechercher le mot \"autorit\u00e9\" dans tous les contenus de la loi informatique et libert\u00e9s\nrecherche_LODA(text_id=\"78-17\", search=\"autorit\u00e9\", champ=\"ALL\")\n\n# Rechercher le mot \"publique\" dans le champ \"article\" du d\u00e9cret n\u00b02023-823\nrecherche_LODA(text_id='2023-823', search=\"publique\", nature=[\"DECRET\"], champ=\"ARTICLE\")\n\n# Rechercher le mot \"autorit\u00e9\" dans tous les contenus de la loi informatique et libert\u00e9s en ne s\u00e9lectionnant que certains champs sp\u00e9cifiques\nrecherche_LODA(text_id=\"78-17\", search=\"autorit\u00e9\", champ=\"ALL\", formatter=True)\n\n# Rechercher les arr\u00eat\u00e9s et les d\u00e9crets dont la date de signature est entre le 09 ao\u00fbt et le 12 ao\u00fbt 2023\nrecherche_LODA(date_signature=[\"2023-08-09\", \"2023-08-12\"], nature=[\"DECRET\", \"ARRETE\"])\n\n# Recherche l'expression compl\u00e8te \"signature \u00e9lectronique\" dans le champ ARTICLE des d\u00e9crets sign\u00e9s entre le 09 ao\u00fbt 2017 et le 12 ao\u00fbt 2018 \nrecherche_LODA(search=\"signature \u00e9lectronique\", champ='ARTICLE', type_recherche=\"TOUS_LES_MOTS_DANS_UN_CHAMP\", nature=['DECRET'], date_signature=[\"2017-08-09\", \"2018-08-12\"])\n</code></pre> <p>La fonction recherche LODA permet la recherche dans le fond LODA (LODA_DATE, LODA_ETAT) d'un texte par son num\u00e9ro, d'un article dans un texte sp\u00e9cifique, ou d'un terme de recherche dans les champs d'un texte. Il est possible de s\u00e9lectionner le type de textes en modifiant la liste \"nature\" qui est par d\u00e9faut [\"LOI\", \"ORDONNANCE\", \"DECRET\", \"ARRETE\"]. </p> <p>Cette fonction ne r\u00e9cup\u00e8re que les textes en vigueur \u00e0 la date actuelle. Par d\u00e9faut, la facette \"DATE_VERSION\" est d\u00e9finie sur la date du jour, et les facettes \"TEXT_LEGAL_STATUS\" et \"ARTICLE_LEGAL_STATUTS\" sont d\u00e9finies sur \"VIGEUR\", quel que soit le fond cible (LODA_DATE ou LODA_ETAT).</p> <p>! Attention : Il est de la responsabilit\u00e9 exclusive de l'utilisateur de v\u00e9rifier que les informations renvoy\u00e9es par l'API sont pertinentes et \u00e0 jour.</p>"},{"location":"how-to/#options-supplementaires","title":"Options suppl\u00e9mentaires","text":"<pre><code># Formatage des r\u00e9sultats\nrecherche_code(code_name=\"Code civil\", search=\"7\", formatter=True)\n\n# Pagination\nrecherche_LODA(search=\"environnement\", page_number=2, page_size=20)\n</code></pre>"},{"location":"reference/","title":"R\u00e9f\u00e9rence API","text":""},{"location":"reference/#fonctions-principales","title":"Fonctions principales","text":""},{"location":"reference/#recherche_code","title":"recherche_code","text":"<pre><code>def recherche_code(\n    code_name: str,\n    search: str = None,\n    champ: str = \"NUM_ARTICLE\",\n    type_recherche: str = \"EXACTE\",\n    fond: str = \"CODE_DATE\",\n    formatter: bool = False,\n    page_number: int = 1,\n    page_size: int = 10,\n    *args,\n)\n</code></pre> <p>Recherche dans les codes fran\u00e7ais.</p>"},{"location":"reference/#recherche_loda","title":"recherche_LODA","text":"<pre><code>def recherche_LODA(\n    text_id: str = \"\",\n    search: str = None,\n    champ: str = \"NUM_ARTICLE\",\n    type_recherche: str = \"EXACTE\",\n    fond: str = \"LODA_DATE\",\n    nature: List = [\"LOI\", \"ORDONNANCE\", \"DECRET\", \"ARRETE\"],\n    date_signature: List = None,\n    formatter: bool = False,\n    page_number: int = 1,\n    page_size: int = 10,\n    *args,\n)\n</code></pre> <p>Recherche dans les lois, ordonnances, d\u00e9crets et arr\u00eat\u00e9s.</p>"},{"location":"reference/#recherche_juri","title":"recherche_JURI","text":"<pre><code>def recherche_JURI(\n    search: str = None,\n    champ: str = \"ALL\",\n    type_recherche: str = \"EXACTE\",\n    fond: str = \"JURI\",\n    formatter: bool = False,\n    page_number: int = 1,\n    page_size: int = 10,\n    *args,\n)\n</code></pre> <p>Recherche dans la jurisprudence (en d\u00e9veloppement).</p>"},{"location":"reference/#classes-principales","title":"Classes principales","text":""},{"location":"reference/#legifranceclient","title":"LegifranceClient","text":"<pre><code>class LegifranceClient:\n    def set_api_keys(self, legifrance_api_key=None, legifrance_api_secret=None)\n    def call_api(self, route: str, data: str)\n    def ping(self, route: str = \"consult/ping\")\n    def get(self, route: str)\n</code></pre> <p>G\u00e8re l'authentification et les appels \u00e0 l'API Legifrance.</p>"},{"location":"tutorials/","title":"Tutoriels","text":""},{"location":"tutorials/#premier-pas-avec-pylegifrance","title":"Premier pas avec PyLegifrance","text":""},{"location":"tutorials/#exemple-de-base","title":"Exemple de base","text":"<pre><code>from pylegifrance import recherche_code\n\n# Rechercher l'article 1382 du Code civil\nresultat = recherche_code(code_name=\"Code civil\", search=\"1382\")\nprint(resultat)\n</code></pre>"},{"location":"tutorials/#exemples-avances","title":"Exemples avanc\u00e9s","text":""},{"location":"tutorials/#recherche-par-mots-cles","title":"Recherche par mots-cl\u00e9s","text":"<pre><code>from pylegifrance import recherche_LODA\n\n# Rechercher \"donn\u00e9es personnelles\" dans la loi informatique et libert\u00e9s\nresultats = recherche_LODA(\n    text_id=\"78-17\",\n    search=\"donn\u00e9es personnelles\",\n    champ=\"ARTICLE\",\n    type_recherche=\"TOUS_LES_MOTS_DANS_UN_CHAMP\"\n)\n</code></pre>"},{"location":"tutorials/#filtrage-par-date-et-type","title":"Filtrage par date et type","text":"<pre><code>from pylegifrance import recherche_LODA\n\n# Rechercher les d\u00e9crets sur l'environnement de 2022\nresultats = recherche_LODA(\n    search=\"environnement\",\n    champ=\"TITLE\",\n    nature=[\"DECRET\"],\n    date_signature=[\"2022-01-01\", \"2022-12-31\"]\n)\n</code></pre>"},{"location":"tutorials/#formatage-des-resultats","title":"Formatage des r\u00e9sultats","text":"<pre><code># Avec formatage\nresultat_formate = recherche_CODE(code_name=\"Code civil\", search=\"16\", formatter=True)\n</code></pre>"}]}